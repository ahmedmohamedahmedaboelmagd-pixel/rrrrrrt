// This file handles the functionality related to product details, such as displaying product information and managing user interactions.

document.addEventListener('DOMContentLoaded', () => {
    const productId = getProductIdFromURL();
    // ابدأ بجلب تفاصيل المنتج
    fetchProductDetails(productId); 
});

// استخراج معرف المنتج من الرابط (Query String)
function getProductIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id');
}

// الدالة المسؤولة عن جلب المنتج من ملف JSON
function fetchProductDetails(productId) {
    // نفترض أن detail.html موجود في مسار مثل product/detail.html، لذا ملف JSON سيكون في ../products.json
    fetch('../products.json') 
        .then(response => {
            if (!response.ok) {
                throw new Error('فشل في جلب البيانات');
            }
            return response.json();
        })
        .then(productsByCat => {
            let product = null;

            // البحث عن المنتج في جميع الفئات
            for (const category in productsByCat) {
                if (Array.isArray(productsByCat[category])) {
                    // نستخدم .find() لإيجاد أول منتج يطابق المعرف
                    const foundProduct = productsByCat[category].find(p => p.id === productId); 
                    if (foundProduct) {
                        product = foundProduct;
                        break; // تم العثور على المنتج، نوقف البحث
                    }
                }
            }

            if (product) {
                displayProductDetails(product);
            } else {
                displayNotFound();
            }
        })
        .catch(error => {
            console.error('Error fetching product details:', error);
            displayNotFound();
        });
}

function displayProductDetails(product) {
    const productContainer = document.getElementById('product-details');

    // قيم افتراضية في حالة عدم توفر البيانات
    const name = product.name || "اسم المنتج غير متوفر";
    const price = product.price ? parseFloat(product.price).toFixed(2) + ' ج.م' : "السعر غير متوفر";
    const description = product.desc || "لا يوجد وصف متوفر لهذا المنتج حالياً.";
    // استخدام صورة افتراضية في حال عدم توفر مسار الصورة
    const imagePath = product.image || 'https://via.placeholder.com/400x400?text=Image+Not+Found';

    productContainer.innerHTML = `
        <div class="product-detail">
            <img src="${imagePath}" alt="${name}" onerror="this.onerror=null;this.src='https://via.placeholder.com/400x400?text=Image+Not+Found'">
            
            <h1 style="color:#2563eb; margin-bottom:10px;">${name}</h1>
            <p style="font-size:1.3em; color:#059669; font-weight:700; margin-bottom:20px;">${price}</p>
            
            <div style="text-align:right; max-width:600px; margin:0 auto;">
                <h3 style="color:#334155; border-bottom:1px solid #e2e8f0; padding-bottom:5px; margin-bottom:15px;">الوصف</h3>
                <p style="color:#475569; line-height:1.8;">${description}</p>
            </div>

            <button id="addToCartBtn" style="
                margin-top: 30px;
                background: #2563eb;
                color: #fff;
                padding: 12px 25px;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-size: 1.1em;
                transition: background 0.3s, transform 0.3s;
                box-shadow: 0 4px 10px rgba(37, 99, 235, 0.2);
            ">أضف إلى السلة</button>
        </div>
    `;

    // 2. منطق الإضافة إلى السلة (نسخة مُبسطة من ملف product.js الأصلي)
    const addBtn = document.getElementById('addToCartBtn');
    if (addBtn) {
        // تجهيز المنتج للإضافة إلى السلة (يجب أن يكون متوافقاً مع cart.js)
        const cartProduct = {
            id: product.id,
            name: product.name,
            price: product.price,
            image: product.image
        };

        // تأثيرات زر الإضافة
        addBtn.addEventListener('mouseenter', () => {
            addBtn.style.background = '#1e40af';
            addBtn.style.transform = 'scale(1.05)';
        });
        addBtn.addEventListener('mouseleave', () => {
            addBtn.style.background = '#2563eb';
            addBtn.style.transform = '';
        });

        // عند الضغط على زر الإضافة
        addBtn.addEventListener('click', () => {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            let existing = cart.find(item => item.id === cartProduct.id);

            if (existing) {
                existing.quantity = (existing.quantity || 1) + 1;
            } else {
                cartProduct.quantity = 1;
                cart.push(cartProduct);
            }
            localStorage.setItem('cart', JSON.stringify(cart));
            
            // رد فعل واجهة المستخدم
            addBtn.textContent = "تمت الإضافة!";
            addBtn.style.background = "#059669";
            setTimeout(() => {
                addBtn.textContent = "أضف إلى السلة";
                addBtn.style.background = "#2563eb";
            }, 1200);
        });
    }
}

function displayNotFound() {
    const productContainer = document.getElementById('product-details');
    productContainer.innerHTML = `
        <div style="text-align:center; padding:40px;">
            <h2 style="color:#dc2777;">المنتج غير موجود</h2>
            <p style="color:#334155;">عذراً، المنتج الذي تبحث عنه غير متوفر حالياً.</p>
        </div>
    `;
}